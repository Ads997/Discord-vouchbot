const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const express = require('express');
require('dotenv').config();

const app = express();
const config = require('./target.json');

// ===== SETTINGS =====
const RATING_MESSAGES = {
  2: [
    'Decent, but some parts felt a bit off üòê',
    'Service was okay but not very engaging üôÅ',
    'Could improve speed and communication ‚è≥',
    'A fair trade, but lacked friendliness üò∂',
    'Not the best experience, needs improvement üîß',
    'Trade was slow and unorganized üê¢',
    'Communication could be better üìµ',
    'Some issues with responsiveness üòï',
    'Mediocre service, expected more üòê',
    'Could be more professional üßê',
    'The trader seemed distracted üôÉ',
    'Not very reliable this time üò¨',
    'Some delays during the trade üïí',
    'Overall, just below average üëé'
  ],
  3: [
    'Okay service, nothing special üôÇ',
    'Seemed a bit distracted during the trade ü§î',
    'Not bad, but could be more responsive üìû',
    'Average experience, nothing too bad or great ‚öñÔ∏è',
    'Solid trade, but room for improvement üí™',
    'Good effort, just slightly lacking üëç',
    'Decent communication, could be clearer üó£Ô∏è',
    'Fairly reliable, but some delays ‚è∞',
    'Service was acceptable, no complaints ü§∑',
    'Transaction went smoothly but routine ‚úîÔ∏è',
    'Met expectations but didn‚Äôt exceed üü∞',
    'The trade was okay but a bit slow üêå',
    'Friendly enough but not outstanding üòä',
    'Good but nothing memorable ‚ú®'
  ],
  4: [
    'Nice trade, a little slow but overall good üëç',
    'Friendly and smooth transaction üòä',
    'Helpful and pleasant to deal with ü§ù',
    'Good experience, would recommend üõí',
    'Reliable trader, quick to respond ‚ö°',
    'Fairly fast and professional üöÄ',
    'Polite and efficient communication üí¨',
    'Satisfied with the trade üëç',
    'Smooth process, no issues üîÑ',
    'Good value and quick replies üíé',
    'Clear communication, easy to work with üó®Ô∏è',
    'Trustworthy and courteous ü§ó',
    'A solid trade, happy with results ü•≥',
    'Prompt and friendly throughout üëç'
  ],
  5: [
    'Really nice, one of the best experiences! üåü',
    'Perfect service, fast and professional üöÄ',
    'Outstanding trader, highly recommended üíØ',
    'Amazing experience, flawless from start to finish üèÜ',
    'Exceptional communication and speed ‚ö°',
    'Super reliable and friendly üòä',
    'Top-notch service, would trade again üî•',
    'Excellent professionalism and kindness üëè',
    'Fast, smooth, and very trustworthy üíé',
    'Incredible trader, highly impressed üòç',
    'Flawless execution and great attitude üåà',
    'Highly efficient and easy to work with ü§ù',
    'Beyond expectations, five stars ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê',
    'Best trade experience I‚Äôve had so far ü•á'
  ]
};

const RATINGS = [
  { stars: '‚≠ê‚≠ê', value: 2, color: 0xF59E0B },
  { stars: '‚≠ê‚≠ê‚≠ê', value: 3, color: 0xF59E0B },
  { stars: '‚≠ê‚≠ê‚≠ê‚≠ê', value: 4, color: 0x57F287 },
  { stars: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', value: 5, color: 0x57F287 }
];

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages
  ]
});

// Express ping for uptime robot
app.get('/', (req, res) => res.send('Bot is alive!'));
const DEFAULT_PORT = process.env.PORT || 3000;

function startServer(port) {
  const server = app.listen(port, () => {
    console.log(`üåê Web server started on port ${port}`);
  });

  server.on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
      console.warn(`Port ${port} is in use, trying port ${port + 1}...`);
      startServer(port + 1);
    } else {
      console.error('Server error:', err);
    }
  });
}
startServer(Number(DEFAULT_PORT));

function isValidDiscordId(id) {
  const maxSnowflake = BigInt('9223372036854775807');
  if (!/^\d+$/.test(id)) return false;
  if (id.length > 18) return false;
  try {
    return BigInt(id) <= maxSnowflake;
  } catch {
    return false;
  }
}

client.once('ready', () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);

  if (!config.servers || config.servers.length === 0) {
    console.warn('‚ö†Ô∏è No servers found in target.json');
    return;
  }

  config.servers.forEach(serverConfig => {
    sendVouchForServer(serverConfig);
  });

  setInterval(() => {
    config.servers.forEach(serverConfig => {
      sendVouchForServer(serverConfig);
    });
  }, 10 * 60 * 1000);
});

function getRandomFromArray(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

async function sendVouchForServer(serverConfig) {
  try {
    const { serverId, channelId, userIds } = serverConfig;
    if (!userIds || userIds.length === 0) return;

    const validUserIds = userIds.filter(id => isValidDiscordId(id));
    if (validUserIds.length === 0) {
      console.warn(`No valid user IDs in server ${serverId}`);
      return;
    }

    const guild = await client.guilds.fetch(serverId);
    const channel = await client.channels.fetch(channelId);
    const members = await guild.members.fetch();
    const humanMembers = members.filter(m => !m.user.bot);
    const fromMember = getRandomFromArray(humanMembers.map(m => m));

    if (!fromMember) {
      console.warn(`No valid human members found to send vouch in server ${serverId}`);
      return;
    }

    const userId = getRandomFromArray(validUserIds);
    const rating = getRandomFromArray(RATINGS);
    const feedbackList = RATING_MESSAGES[rating.value];
    const feedback = getRandomFromArray(feedbackList);

    const targetUser = await client.users.fetch(userId);

    const embed = new EmbedBuilder()
      .setColor(rating.color)
      .setAuthor({
        name: fromMember.user.username,
        iconURL: fromMember.user.displayAvatarURL()
      })
      .setTitle('New Vouch')
      .setDescription(`**${fromMember.user.username}** left a vouch for **${targetUser.username}**`)
      .addFields(
        { name: 'Rating', value: `${rating.stars} (${rating.value}/5)` },
        { name: 'Users', value: `**From:** <@${fromMember.id}>\n**To:** <@${userId}>` },
        { name: 'Feedback', value: `"${feedback}"` }
      )
      .setThumbnail(targetUser.displayAvatarURL({ size: 512 }))
      .setFooter({ text: 'Ken softworks¬©' })
      .setTimestamp();

    await channel.send({ embeds: [embed] });
    console.log(`‚úÖ Sent vouch from ${fromMember.user.tag} to ${targetUser.tag} in server ${serverId}`);

  } catch (err) {
    console.error('‚ùå Failed to send vouch:', err);
  }
}

client.login(process.env.TOKEN);